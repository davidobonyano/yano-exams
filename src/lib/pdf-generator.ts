import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'
import { ExamResult, Exam, StudentExamAttempt } from '@/types/database-v2'

interface GeneratePDFOptions {
  exam: Exam
  attempt: StudentExamAttempt
  result: ExamResult
  studentName: string
  sessionCode: string
}

export const generateResultsPDF = async (options: GeneratePDFOptions) => {
  const { exam, attempt, result, studentName, sessionCode } = options

  // Create a new jsPDF instance
  const pdf = new jsPDF()
  const pageWidth = pdf.internal.pageSize.getWidth()
  const pageHeight = pdf.internal.pageSize.getHeight()
  
  // Set up fonts and colors
  pdf.setFont('helvetica', 'bold')
  pdf.setFontSize(24)
  
  // Header
  pdf.setTextColor(59, 130, 246) // Blue color
  pdf.text('YANO Exam Platform', pageWidth / 2, 30, { align: 'center' })
  
  pdf.setFontSize(18)
  pdf.setTextColor(0, 0, 0)
  pdf.text('Exam Results Certificate', pageWidth / 2, 45, { align: 'center' })
  
  // Divider line
  pdf.setLineWidth(0.5)
  pdf.line(20, 55, pageWidth - 20, 55)
  
  // Student Information
  pdf.setFont('helvetica', 'bold')
  pdf.setFontSize(12)
  pdf.text('Student Information:', 20, 75)
  
  pdf.setFont('helvetica', 'normal')
  pdf.setFontSize(10)
  pdf.text(`Name: ${studentName}`, 30, 85)
  pdf.text(`Session Code: ${sessionCode}`, 30, 95)
  pdf.text(`Date: ${new Date().toLocaleDateString()}`, 30, 105)
  
  // Exam Information
  pdf.setFont('helvetica', 'bold')
  pdf.setFontSize(12)
  pdf.text('Exam Information:', 20, 125)
  
  pdf.setFont('helvetica', 'normal')
  pdf.setFontSize(10)
  pdf.text(`Exam Title: ${exam.title}`, 30, 135)
  pdf.text(`Duration: ${exam.duration_minutes} minutes`, 30, 145)
  pdf.text(`Started: ${new Date(attempt.started_at!).toLocaleString()}`, 30, 155)
  pdf.text(`Completed: ${new Date(attempt.completed_at!).toLocaleString()}`, 30, 165)
  
  // Results Section
  pdf.setFont('helvetica', 'bold')
  pdf.setFontSize(14)
  
  // Pass/Fail status with color
  if (result.passed) {
    pdf.setTextColor(34, 197, 94) // Green
    pdf.text('PASSED', pageWidth / 2, 190, { align: 'center' })
  } else {
    pdf.setTextColor(239, 68, 68) // Red
    pdf.text('FAILED', pageWidth / 2, 190, { align: 'center' })
  }
  
  // Score
  pdf.setTextColor(0, 0, 0)
  pdf.setFontSize(24)
  pdf.text(`${result.percentage_score.toFixed(1)}%`, pageWidth / 2, 210, { align: 'center' })
  
  pdf.setFontSize(10)
  pdf.text(`(${result.points_earned} out of ${result.total_points} points)`, pageWidth / 2, 220, { align: 'center' })
  
  // Score Breakdown Table
  pdf.setFont('helvetica', 'bold')
  pdf.setFontSize(12)
  pdf.text('Score Breakdown:', 20, 245)
  
  // Table headers
  const tableStartY = 255
  const colWidth = (pageWidth - 40) / 4
  
  pdf.setFont('helvetica', 'bold')
  pdf.setFontSize(9)
  pdf.rect(20, tableStartY, colWidth, 15)
  pdf.text('Correct Answers', 20 + colWidth/2, tableStartY + 10, { align: 'center' })
  
  pdf.rect(20 + colWidth, tableStartY, colWidth, 15)
  pdf.text('Total Questions', 20 + colWidth + colWidth/2, tableStartY + 10, { align: 'center' })
  
  pdf.rect(20 + 2*colWidth, tableStartY, colWidth, 15)
  pdf.text('Points Earned', 20 + 2*colWidth + colWidth/2, tableStartY + 10, { align: 'center' })
  
  pdf.rect(20 + 3*colWidth, tableStartY, colWidth, 15)
  pdf.text('Total Points', 20 + 3*colWidth + colWidth/2, tableStartY + 10, { align: 'center' })
  
  // Table data
  pdf.setFont('helvetica', 'normal')
  pdf.rect(20, tableStartY + 15, colWidth, 15)
  pdf.text(result.correct_answers.toString(), 20 + colWidth/2, tableStartY + 25, { align: 'center' })
  
  pdf.rect(20 + colWidth, tableStartY + 15, colWidth, 15)
  pdf.text(result.total_questions.toString(), 20 + colWidth + colWidth/2, tableStartY + 25, { align: 'center' })
  
  pdf.rect(20 + 2*colWidth, tableStartY + 15, colWidth, 15)
  pdf.text(result.points_earned.toString(), 20 + 2*colWidth + colWidth/2, tableStartY + 25, { align: 'center' })
  
  pdf.rect(20 + 3*colWidth, tableStartY + 15, colWidth, 15)
  pdf.text(result.total_points.toString(), 20 + 3*colWidth + colWidth/2, tableStartY + 25, { align: 'center' })
  
  // Footer
  const footerY = pageHeight - 30
  pdf.setFontSize(8)
  pdf.setTextColor(100, 100, 100)
  pdf.text('This document was generated by YANO Exam Platform', pageWidth / 2, footerY, { align: 'center' })
  pdf.text(`Generated on ${new Date().toLocaleString()}`, pageWidth / 2, footerY + 10, { align: 'center' })
  
  return pdf
}

export const downloadPDF = (pdf: jsPDF, filename: string) => {
  pdf.save(filename)
}

export const generateResultsPDFFromHTML = async (elementId: string, filename: string) => {
  const element = document.getElementById(elementId)
  if (!element) {
    throw new Error('Element not found')
  }

  const canvas = await html2canvas(element, {
    scale: 2,
    useCORS: true,
    allowTaint: true,
    backgroundColor: '#ffffff'
  })
  
  const imgData = canvas.toDataURL('image/png')
  const pdf = new jsPDF()
  
  const imgWidth = 210
  const pageHeight = 295
  const imgHeight = (canvas.height * imgWidth) / canvas.width
  let heightLeft = imgHeight
  
  let position = 0
  
  pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
  heightLeft -= pageHeight
  
  while (heightLeft >= 0) {
    position = heightLeft - imgHeight
    pdf.addPage()
    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
    heightLeft -= pageHeight
  }
  
  pdf.save(filename)
}