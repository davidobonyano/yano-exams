import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'
import { ExamResult, Exam, StudentExamAttempt } from '@/types/database-v2'
import { getDetailedStudentResults } from '@/lib/auto-scoring'

interface GeneratePDFOptions {
  exam: Exam
  attempt: StudentExamAttempt
  result: ExamResult
  studentName: string
  sessionCode: string
}

export const generateResultsPDF = async (options: GeneratePDFOptions) => {
  const { exam, attempt, result, studentName, sessionCode } = options

  try {
    // Get detailed results for question-by-question breakdown
    const detailedResults = await getDetailedStudentResults(attempt.id)
    
    // Create a new jsPDF instance
    const pdf = new jsPDF()
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    
    // Set up fonts and colors
    pdf.setFont('helvetica', 'bold')
    pdf.setFontSize(20)
    
    // Header
    pdf.setTextColor(0, 0, 0)
    pdf.text('EXAM RESULTS', pageWidth / 2, 30, { align: 'center' })
    
    // Divider line
    pdf.setLineWidth(0.5)
    pdf.line(20, 40, pageWidth - 20, 40)
    
    // Student Information Section
    pdf.setFont('helvetica', 'bold')
    pdf.setFontSize(12)
    pdf.text('STUDENT INFORMATION', 20, 60)
    
    pdf.setFont('helvetica', 'normal')
    pdf.setFontSize(10)
    pdf.text(`Name: ${studentName}`, 20, 75)
    pdf.text(`Student ID: ${detailedResults?.attempt_info?.student_school_id || 'N/A'}`, 20, 85)
    pdf.text(`Class: ${detailedResults?.attempt_info?.student_class || 'N/A'}`, 20, 95)
    
    // Exam Information Section
    pdf.setFont('helvetica', 'bold')
    pdf.setFontSize(12)
    pdf.text('EXAM INFORMATION', 20, 115)
    
    pdf.setFont('helvetica', 'normal')
    pdf.setFontSize(10)
    pdf.text(`Exam: ${exam.title}`, 20, 130)
    pdf.text(`Session Code: ${detailedResults?.attempt_info?.session_code || sessionCode}`, 20, 140)
    pdf.text(`Score: ${result.correct_answers}/${result.total_questions}`, 20, 150)
    pdf.text(`Percentage: ${result.percentage_score.toFixed(1)}%`, 20, 160)
    pdf.text(`Status: ${result.passed ? 'PASSED' : 'FAILED'}`, 20, 170)
    pdf.text(`Date: ${new Date(result.created_at).toLocaleDateString()}`, 20, 180)
    
    // Detailed Results Section
    if (detailedResults?.success && detailedResults.detailed_answers?.length > 0) {
      pdf.setFont('helvetica', 'bold')
      pdf.setFontSize(12)
      pdf.text('DETAILED RESULTS', 20, 200)
      
      let currentY = 215
      const lineHeight = 8
      const questionSpacing = 25
      
      for (let i = 0; i < detailedResults.detailed_answers.length; i++) {
        const answer = detailedResults.detailed_answers[i]
        
        // Check if we need a new page
        if (currentY + questionSpacing > pageHeight - 30) {
          pdf.addPage()
          currentY = 30
        }
        
        // Question header
        pdf.setFont('helvetica', 'bold')
        pdf.setFontSize(10)
        pdf.text(`Question ${i + 1}: ${answer.is_correct ? 'CORRECT' : 'INCORRECT'}`, 20, currentY)
        currentY += lineHeight
        
        // Question text (truncated if too long)
        pdf.setFont('helvetica', 'normal')
        pdf.setFontSize(9)
        const questionText = answer.question_text.length > 80 
          ? answer.question_text.substring(0, 80) + '...' 
          : answer.question_text
        pdf.text(`Q: ${questionText}`, 25, currentY)
        currentY += lineHeight
        
        // Student answer
        pdf.text(`Your Answer: ${answer.student_answer_text || 'Not answered'}`, 25, currentY)
        currentY += lineHeight
        
        // Correct answer if student was wrong
        if (!answer.is_correct) {
          pdf.text(`Correct Answer: ${answer.correct_answer_text}`, 25, currentY)
          currentY += lineHeight
        }
        
        // Points
        pdf.text(`Points: ${answer.points_earned}/${answer.question_points}`, 25, currentY)
        currentY += questionSpacing
      }
    }
    
    // Footer
    const footerY = pdf.internal.pageSize.getHeight() - 20
    pdf.setFontSize(8)
    pdf.setTextColor(100, 100, 100)
    pdf.text('This document was generated by YANO Exam Platform', pageWidth / 2, footerY, { align: 'center' })
    pdf.text(`Generated on ${new Date().toLocaleString()}`, pageWidth / 2, footerY + 10, { align: 'center' })
    
    return pdf
  } catch (error) {
    console.error('Error generating detailed PDF:', error)
    
    // Fallback to simple PDF if detailed results fail
    const pdf = new jsPDF()
    const pageWidth = pdf.internal.pageSize.getWidth()
    
    pdf.setFont('helvetica', 'bold')
    pdf.setFontSize(20)
    pdf.setTextColor(0, 0, 0)
    pdf.text('EXAM RESULTS', pageWidth / 2, 30, { align: 'center' })
    
    pdf.setFont('helvetica', 'normal')
    pdf.setFontSize(12)
    pdf.text(`Student: ${studentName}`, 20, 60)
    pdf.text(`Exam: ${exam.title}`, 20, 75)
    pdf.text(`Score: ${result.percentage_score.toFixed(1)}%`, 20, 90)
    pdf.text(`Status: ${result.passed ? 'PASSED' : 'FAILED'}`, 20, 105)
    
    return pdf
  }
}

export const downloadPDF = (pdf: jsPDF, filename: string) => {
  pdf.save(filename)
}

export const generateResultsPDFFromHTML = async (elementId: string, filename: string) => {
  const element = document.getElementById(elementId)
  if (!element) {
    throw new Error('Element not found')
  }

  const canvas = await html2canvas(element, {
    scale: 2,
    useCORS: true,
    allowTaint: true,
    backgroundColor: '#ffffff'
  })
  
  const imgData = canvas.toDataURL('image/png')
  const pdf = new jsPDF()
  
  const imgWidth = 210
  const pageHeight = 295
  const imgHeight = (canvas.height * imgWidth) / canvas.width
  let heightLeft = imgHeight
  
  let position = 0
  
  pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
  heightLeft -= pageHeight
  
  while (heightLeft >= 0) {
    position = heightLeft - imgHeight
    pdf.addPage()
    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
    heightLeft -= pageHeight
  }
  
  pdf.save(filename)
}